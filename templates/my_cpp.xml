<templateSet group="my_cpp">
  <template name="co" value="std::cout &lt;&lt; $STATEMENT$ &lt;&lt; '\n';$END$" description="&quot;std::cout&quot; with '\n'" toReformat="false" toShortenFQNames="true">
    <variable name="STATEMENT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="c" value="true" />
      <option name="cpp" value="true" />
    </context>
  </template>
  <template name="for" value="for (size_t $INDEX$ = 0; $COPY_INDEX$ &lt; $UPPER_BOUND$; $COPY_INDEX$++) {&#10;  $END$&#10;}" description="Loop with size_t i" toReformat="true" toShortenFQNames="true">
    <variable name="INDEX" expression="suggestIndexName()" defaultValue="" alwaysStopAt="true" />
    <variable name="COPY_INDEX" expression="INDEX" defaultValue="" alwaysStopAt="false" />
    <variable name="UPPER_BOUND" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="c" value="true" />
      <option name="cpp" value="true" />
    </context>
  </template>
  <template name="foe" value="for ($AUTO_TYPE$ $VAR$ : $CONTAINER$) {&#10;  $END$&#10;}" description="Iterate range" toReformat="true" toShortenFQNames="true">
    <variable name="CONTAINER" expression="variableForIteration()" defaultValue="x" alwaysStopAt="true" />
    <variable name="VAR" expression="suggestVariableName()" defaultValue="item" alwaysStopAt="true" />
    <variable name="AUTO_TYPE" expression="autoTypeForRangedForLoop()" defaultValue="auto const &amp;" alwaysStopAt="true" />
    <context>
      <option name="c" value="true" />
      <option name="cpp" value="true" />
    </context>
  </template>
  <template name="fob" value="for ($ITER_TYPE$ $ITER$ = $CONTAINER$.begin(); $COPY_ITER$ != $COPY_CONTAINER$.end(); $COPY_ITER$++) {&#10;  $END$&#10;}" description="Iterate with begin/end" toReformat="false" toShortenFQNames="true">
    <variable name="CONTAINER" expression="variableForRangeBasedIteration()" defaultValue="&quot;container&quot;" alwaysStopAt="true" />
    <variable name="ITER_TYPE" expression="rightSideType()" defaultValue="&quot;auto&quot;" alwaysStopAt="false" />
    <variable name="ITER" expression="suggestVariableName()" defaultValue="" alwaysStopAt="true" />
    <variable name="COPY_ITER" expression="ITER" defaultValue="" alwaysStopAt="false" />
    <variable name="COPY_CONTAINER" expression="CONTAINER" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="c" value="true" />
      <option name="cpp" value="true" />
    </context>
  </template>
  <template name="if" value="if ($VAR$) {&#10;  $END$&#10;}" description="&quot;if&quot; template" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="suggestVariableName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="c" value="true" />
      <option name="cpp" value="true" />
    </context>
  </template>
  <template name="ife" value="if ($VAR$) {&#10;  $END$&#10;} &#10;else {&#10;  &#10;} " description="&quot;if else&quot; template" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="suggestVariableName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="c" value="true" />
      <option name="cpp" value="true" />
    </context>
  </template>
  <template name="re" value="return $VAR$;$END$" description="&quot;return&quot; statement" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="suggestVariableName()" defaultValue="0" alwaysStopAt="true" />
    <context>
      <option name="c" value="true" />
      <option name="cpp" value="true" />
    </context>
  </template>
  <template name="sw" value="switch ($VAR$) {&#10;  case $CASE1$: {&#10;    $END$&#10;    break;&#10;  }&#10;  case $CASE2$: {&#10;    &#10;    break;&#10;  }&#10;  default: {&#10;    &#10;    break;&#10;  }&#10;}" description="&quot;switch&quot; template" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="suggestVariableName()" defaultValue="" alwaysStopAt="true" />
    <variable name="CASE1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CASE2" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="c" value="true" />
      <option name="cpp" value="true" />
    </context>
  </template>
  <template name="try" value="try {&#10;  $END$&#10;}&#10;catch (std::exception const &amp; e) {&#10;  std::cout &lt;&lt; e.what() &lt;&lt; '\n';&#10;}" description="&quot;try catch&quot; template" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="c" value="true" />
      <option name="cpp" value="true" />
    </context>
  </template>
  <template name="wh" value="while ($VAR$) {&#10;  $END$&#10;}" description="&quot;while&quot; template" toReformat="true" toShortenFQNames="true">
    <variable name="VAR" expression="suggestVariableName()" defaultValue="true" alwaysStopAt="true" />
    <context>
      <option name="c" value="true" />
      <option name="cpp" value="true" />
    </context>
  </template>
</templateSet>